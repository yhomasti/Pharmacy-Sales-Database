library("kableExtra")
}
query_top_five <- "
SELECT product_name, SUM(total_revenue) AS total_revenue, SUM(total_units_sold) AS total_units
FROM product_facts
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
"
top_five_products <- dbGetQuery(aivendb, query_top_five)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
#installing any necessary packages for reports:
if (!require("kableExtra")) {
install.packages("kableExtra")
library("kableExtra")
}
query_top_five <- "
SELECT product_name, SUM(total_revenue) AS total_revenue, SUM(total_units_sold) AS total_units
FROM product_facts
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
"
top_five_products <- dbGetQuery(aivendb, query_top_five)
top_five_chart <- kable(top_five_products, caption = "Top Five Products by Revenue (2020-2023)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
#disconnecting from the aivendb now
#disconnect(aivendb)
query_top_five <- "
SELECT product_name, SUM(total_revenue) AS total_revenue, SUM(total_units_sold) AS total_units
FROM product_facts
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
"
top_five_products <- dbGetQuery(aivendb, query_top_five)
top_five_chart <- kable(top_five_products, caption = "Top Five Products by Revenue (2020-2023)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
query_top_five <- "
SELECT product_name, SUM(total_revenue) AS total_revenue, SUM(total_units_sold) AS total_units
FROM product_facts
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
"
top_five_products <- dbGetQuery(aivendb, query_top_five)
top_five_chart <- kable(top_five_products, caption = "Top Five Products by Revenue (2020-2023)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
top_five_chart
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
View(combined_data)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
product_facts <- get_product_facts(dbcon)
product_facts <- get_product_facts(dbcon)
View(product_facts)
print(dbGetQuery(aivendb, "DESCRIBE product_facts"))
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
dbDisconnect(aivendb)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
dbDisconnect(aivendb)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
print(dbGetQuery(aivendb, "SELECT * FROM rep_facts LIMIT 10"))
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
# Query to determine the most recent year
query_most_recent_year <- "
SELECT MAX(year) AS most_recent_year
FROM product_facts;
"
most_recent_year <- dbGetQuery(aivendb, query_most_recent_year)$most_recent_year[1]
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
dbDisconnect(aivendb)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
#installing any necessary packages for reports:
if (!require("kableExtra")) {
install.packages("kableExtra")
library("kableExtra")
}
query_top_five <- "
SELECT product_name, SUM(total_revenue) AS total_revenue, SUM(total_units_sold) AS total_units
FROM product_facts
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
"
top_five_products <- dbGetQuery(aivendb, query_top_five)
top_five_chart <- kable(top_five_products, caption = "Top Five Products by Revenue (2020-2023)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
top_five_chart
# Query to determine the most recent year
query_most_recent_year <- "
SELECT MAX(year) AS most_recent_year
FROM product_facts;
"
most_recent_year <- dbGetQuery(aivendb, query_most_recent_year)$most_recent_year[1]
#disconnecting from the aivendb now
#disconnect(aivendb)
#installing any necessary packages for reports:
if (!require("kableExtra")) {
install.packages("kableExtra")
library("kableExtra")
}
query_top_five <- "
SELECT product_name, SUM(total_revenue) AS total_revenue, SUM(total_units_sold) AS total_units
FROM product_facts
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
"
top_five_products <- dbGetQuery(aivendb, query_top_five)
top_five_chart <- kable(top_five_products, caption = "Top Five Products by Revenue (2020-2023)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
top_five_chart
#statement to determine the most recent year
query_most_recent_year <- "
SELECT MAX(year) AS most_recent_year
FROM product_facts;
"
most_recent_year <-
dbGetQuery(aivendb, query_most_recent_year)$most_recent_year[1]
#the total revenue per quarter per product for the most recent year
query_quarterly_revenue <- sprintf("
SELECT product_name, quarter, SUM(total_revenue) AS total_revenue
FROM (
SELECT product_name,
CASE
WHEN month IN ('01', '02', '03') THEN 'Q1' -- yikes
WHEN month IN ('04', '05', '06') THEN 'Q2'
WHEN month IN ('07', '08', '09') THEN 'Q3'
WHEN month IN ('10', '11', '12') THEN 'Q4'
END AS quarter,
total_revenue
FROM product_facts
WHERE year = '%s'
) subquery
GROUP BY product_name, quarter
ORDER BY product_name, quarter;
", most_recent_year)
quarterly_revenue <- dbGetQuery(aivendb, query_quarterly_revenue)
#creating the table with KableExtra ... I hope this looks good :')
kable(quarterly_revenue, caption =
sprintf("Revenue Per Quarter Per Product for %s", most_recent_year)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
#disconnecting from the aivendb now
#disconnect(aivendb)
#statement to determine the most recent year
query_most_recent_year <- "
SELECT MAX(year) AS most_recent_year
FROM product_facts;
"
most_recent_year <-
dbGetQuery(aivendb, query_most_recent_year)$most_recent_year[1]
#the total revenue per quarter per product for the most recent year
query_quarterly_revenue <- sprintf("
SELECT product_name,
CASE
WHEN month IN ('01', '02', '03') THEN 'Q1'
WHEN month IN ('04', '05', '06') THEN 'Q2'
WHEN month IN ('07', '08', '09') THEN 'Q3'
WHEN month IN ('10', '11', '12') THEN 'Q4'
END AS quarter,
SUM(total_revenue) AS total_revenue
FROM product_facts
WHERE year = '%s' AND month IS NOT NULL
GROUP BY product_name, quarter
ORDER BY product_name, quarter;
", most_recent_year)
quarterly_revenue <- dbGetQuery(aivendb, query_quarterly_revenue)
#creating the table with KableExtra ... I hope this looks good :')
kable(quarterly_revenue, caption =
sprintf("Revenue Per Quarter Per Product for %s", most_recent_year)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
#installing any necessary packages for reports:
if (!require("kableExtra")) {
install.packages("kableExtra")
library("kableExtra")
}
print(dbGetQuery("SELECT * FROM product_facts"))
#installing any necessary packages for reports:
if (!require("kableExtra")) {
install.packages("kableExtra")
library("kableExtra")
}
dbGetQuery("SELECT * FROM product_facts")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
dbDisconnect(aivendb)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
#installing any necessary packages for reports:
if (!require("kableExtra")) {
install.packages("kableExtra")
library("kableExtra")
}
query_top_five <- "
SELECT product_name, SUM(total_revenue) AS total_revenue, SUM(total_units_sold)
AS total_units
FROM product_facts
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
"
top_five_products <- dbGetQuery(aivendb, query_top_five)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
#installing any necessary packages for reports:
if (!require("kableExtra")) {
install.packages("kableExtra")
library("kableExtra")
}
query_top_five <- "
SELECT product_name, SUM(total_revenue) AS total_revenue, SUM(total_units_sold)
AS total_units
FROM product_facts
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
"
top_five_products <- dbGetQuery(aivendb, query_top_five)
##using KableExtra to produce a little table ... I hope this looks good :')
top_five_chart <- kable(top_five_products, caption =
"Top Five Products by Revenue (2020-2023)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
top_five_chart
#statement to determine the most recent year
query_most_recent_year <- "
SELECT MAX(year) AS most_recent_year
FROM product_facts;
"
most_recent_year <-
dbGetQuery(aivendb, query_most_recent_year)$most_recent_year[1]
#the total revenue per quarter per product for the most recent year
query_quarterly_revenue <- sprintf("
SELECT product_name,
CASE
WHEN month IN ('1', '2', '3') THEN 'Q1'
WHEN month IN ('4', '5', '6') THEN 'Q2'
WHEN month IN ('7', '8', '9') THEN 'Q3'
WHEN month IN ('10', '11', '12') THEN 'Q4'
END AS quarter,
SUM(total_revenue) AS total_revenue
FROM product_facts
WHERE year = '%s' AND month IS NOT NULL
GROUP BY product_name, quarter
ORDER BY product_name, quarter;
", most_recent_year)
quarterly_revenue <- dbGetQuery(aivendb, query_quarterly_revenue)
#creating the table with KableExtra ... I hope this looks good :')
kable(quarterly_revenue, caption =
sprintf("Revenue Per Quarter Per Product for %s", most_recent_year)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
#disconnecting from the aivendb now
disconnect(aivendb)
# Query to determine the year range
query_year_range <- "
SELECT MIN(year) AS start_year, MAX(year) AS end_year
FROM product_facts;
"
year_range <- dbGetQuery(aivendb, query_year_range)
# Extract the start and end years
start_year <- year_range$start_year[1]
end_year <- year_range$end_year[1]
query_top_five <- "
SELECT product_name, SUM(total_revenue) AS total_revenue, SUM(total_units_sold)
AS total_units
FROM product_facts
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
"
top_five_products <- dbGetQuery(aivendb, query_top_five)
##using KableExtra to produce a little table ... I hope this looks good :')
top_five_chart <- kable(top_five_products, caption =
"Top Five Products by Revenue (2020-2023)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
top_five_chart
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
dbDisconnect(aivendb)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
#installing any necessary packages for reports:
if (!require("kableExtra")) {
install.packages("kableExtra")
library("kableExtra")
}
#Determine the year range
query_year_range <- "
SELECT MIN(year) AS start_year, MAX(year) AS end_year
FROM product_facts;
"
year_range <- dbGetQuery(aivendb, query_year_range)
# Extract the start and end years
start_year <- year_range$start_year[1]
end_year <- year_range$end_year[1]
query_top_five <- "
SELECT product_name, SUM(total_revenue) AS total_revenue, SUM(total_units_sold)
AS total_units
FROM product_facts
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
"
top_five_products <- dbGetQuery(aivendb, query_top_five)
##using KableExtra to produce a little table ... I hope this looks good :')
top_five_chart <- kable(top_five_products, caption =
"Top Five Products by Revenue (2020-2023)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
top_five_chart
#statement to determine the most recent year
query_most_recent_year <- "
SELECT MAX(year) AS most_recent_year
FROM product_facts;
"
most_recent_year <-
dbGetQuery(aivendb, query_most_recent_year)$most_recent_year[1]
#the total revenue per quarter per product for the most recent year
query_quarterly_revenue <- sprintf("
SELECT product_name,
CASE
WHEN month IN ('1', '2', '3') THEN 'Q1'
WHEN month IN ('4', '5', '6') THEN 'Q2'
WHEN month IN ('7', '8', '9') THEN 'Q3'
WHEN month IN ('10', '11', '12') THEN 'Q4'
END AS quarter,
SUM(total_revenue) AS total_revenue
FROM product_facts
WHERE year = '%s' AND month IS NOT NULL
GROUP BY product_name, quarter
ORDER BY product_name, quarter;
", most_recent_year)
quarterly_revenue <- dbGetQuery(aivendb, query_quarterly_revenue)
#creating the table with KableExtra
kable(quarterly_revenue, caption =
sprintf("Revenue Per Quarter Per Product for %s", most_recent_year)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
#disconnecting from the aivendb now
#dbDisconnect(aivendb)
#get revenue per product per country for the most recent two years
query_product_country_revenue <- sprintf("
SELECT p.product_name, c.country_name, SUM(total_revenue) AS total_revenue
FROM product_facts p
JOIN country_lookup c ON p.country_id = c.country_id
WHERE year IN ('%s', '%s')
GROUP BY p.product_name, c.country_name
ORDER BY p.product_name, total_revenue DESC;
", start_year, end_year)
product_country_revenue <- dbGetQuery(aivendb, query_product_country_revenue)
#disconnecting from the aivendb now
dbDisconnect(aivendb)
#installing any necessary packages for reports:
if (!require("kableExtra")) {
install.packages("kableExtra")
library("kableExtra")
}
#Determine the year range
query_year_range <- "
SELECT MIN(year) AS start_year, MAX(year) AS end_year
FROM product_facts;
"
year_range <- dbGetQuery(aivendb, query_year_range)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
#installing any necessary packages for reports:
if (!require("kableExtra")) {
install.packages("kableExtra")
library("kableExtra")
}
#Determine the year range
query_year_range <- "
SELECT MIN(year) AS start_year, MAX(year) AS end_year
FROM product_facts;
"
year_range <- dbGetQuery(aivendb, query_year_range)
# Extract the start and end years
start_year <- year_range$start_year[1]
end_year <- year_range$end_year[1]
query_top_five <- "
SELECT product_name, SUM(total_revenue) AS total_revenue, SUM(total_units_sold)
AS total_units
FROM product_facts
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5;
"
top_five_products <- dbGetQuery(aivendb, query_top_five)
##using KableExtra to produce a little table ... I hope this looks good :')
top_five_chart <- kable(top_five_products, caption =
"Top Five Products by Revenue (2020-2023)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
top_five_chart
#statement to determine the most recent year
query_most_recent_year <- "
SELECT MAX(year) AS most_recent_year
FROM product_facts;
"
most_recent_year <-
dbGetQuery(aivendb, query_most_recent_year)$most_recent_year[1]
#the total revenue per quarter per product for the most recent year
query_quarterly_revenue <- sprintf("
SELECT product_name,
CASE
WHEN month IN ('1', '2', '3') THEN 'Q1'
WHEN month IN ('4', '5', '6') THEN 'Q2'
WHEN month IN ('7', '8', '9') THEN 'Q3'
WHEN month IN ('10', '11', '12') THEN 'Q4'
END AS quarter,
SUM(total_revenue) AS total_revenue
FROM product_facts
WHERE year = '%s' AND month IS NOT NULL
GROUP BY product_name, quarter
ORDER BY product_name, quarter;
", most_recent_year)
quarterly_revenue <- dbGetQuery(aivendb, query_quarterly_revenue)
#creating the table with KableExtra
kable(quarterly_revenue, caption =
sprintf("Revenue Per Quarter Per Product for %s", most_recent_year)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
#get revenue per product per country for the most recent two years
query_product_country_revenue <- sprintf("
SELECT p.product_name, c.country_name, SUM(total_revenue) AS total_revenue
FROM product_facts p
JOIN country_lookup c ON p.country_id = c.country_id
WHERE year IN ('%s', '%s')
GROUP BY p.product_name, c.country_name
ORDER BY p.product_name, total_revenue DESC;
", start_year, end_year)
product_country_revenue <- dbGetQuery(aivendb, query_product_country_revenue)
#get revenue per product per country for the most recent two years
query_product_country_revenue <- sprintf("
SELECT p.product_name, c.country_name, SUM(total_revenue) AS total_revenue
FROM product_facts p
JOIN country_lookup c ON p.country_id = c.country_id
WHERE year IN ('%s', '%s')
GROUP BY p.product_name, c.country_name
ORDER BY p.product_name, total_revenue DESC;
", start_year, end_year)
dbGetQuery(aivendb, query_product_country_revenue)
product_country_revenue <- dbGetQuery(aivendb, query_product_country_revenue)
View(combined_sales_data)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
dbDisconnect(aivendb)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
#disconnecting from the database
dbDisconnect(aivendb)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
#disconnecting from the database
dbDisconnect(aivendb)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/CreateStarSchema.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
dbDisconnect(dbcon)
dbDisconnect(dbcon)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
dbcon <- dbConnect(SQLite(), "analytics.db")
dbcon <- dbConnect(SQLite(), "analytics.db")
drop_existing(dbcon)
create_schema(dbcon)
#a list of all the csv files with customer/sale information
csv_files <- list("csv-data/pharmaSalesTxn-100.csv",
"csv-data/pharmaSalesTxn-500.csv",
"csv-data/pharmaSalesTxn-900.csv",
"csv-data/pharmaSalesTxn-2000.csv",
"csv-data/pharmaSalesTxn-3000.csv",
"csv-data/pharmaSalesTxn-5000.csv",
"csv-data/pharmaSalesTxn-6000.csv",
"csv-data/pharmaSalesTxn-8000.csv")
combined_data <- do.call(rbind, lapply(csv_files, read.csv,
stringsAsFactors = FALSE))
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
dbDisconnect(aivendb)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
dbDisconnect(dbcon)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
load_reps(dbcon, "csv-data/pharmaReps.csv")
load_products(dbcon)
load_customers(dbcon)
load_countries(dbcon)
dbDisconnect(dbcon)
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
source("C:/Users/Lu/Desktop/cs5200 Database Management Systems/Practicum 2/LoadXML2DB.YiT.R")
